"""
Django settings for RongChangE project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import sys
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

sys.path.insert(0, os.path.join(BASE_DIR, "apps"))
sys.path.insert(0, os.path.join(BASE_DIR, "extra_apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-u)ei)+9dfpb7wsk6n9w=wt0f=q16(xl@)p+50evve#5-d(vrdj"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() in ('true', '1', 'yes')

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "rest_framework",
    "DjangoUeditor",
    "xadmin",
    "crispy_forms",
    "crispy_bootstrap3",
    "reversion",

    "user",
    "agreement",
    "works",
    "survey",

    "qiniuupload",
]

# crispy_forms 1.9.2 以后进行抽离，必须单独install crispy_bootstrap3 并在settings中指定bootstrap版本
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap3"
CRISPY_TEMPLATE_PACK = "bootstrap3"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'vendor.middleware.CsrfCloseMiddleware',
    'vendor.middleware.RequestLogPrintMiddleware',
]

ROOT_URLCONF = "RongChangE.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "RongChangE.wsgi.application"

# Daphne
ASGI_APPLICATION = "RongChangE.asgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ.get('DB_NAME', 'hzkp'),
        "USER": os.environ.get('DB_USER', 'root'),
        "PASSWORD": os.environ.get('DB_PASSWORD', 'root'),
        "HOST": os.environ.get('DB_HOST', '127.0.0.1'),
        "PORT": os.environ.get('DB_PORT', 3306),
        "OPTIONS": {
            "charset": "utf8mb4"
        }
    },
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3')
    # }
}
print(f"DATABASES={DATABASES['default']}")
# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", },
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "zh-Hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_L10N = True

USE_TZ = False

DATE_FORMAT = "%Y-%m-%d"
DATETIME_FORMAT = "%Y/%m/%d %H:%M:%S"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/static/"

# # collectstatic
# STATIC_ROOT = BASE_DIR / "static"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

PRIVATE_UPLOAD_FILE_ROOT = BASE_DIR / "static" / "_private" / "upload" / "files"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REDIS_SCHEME = os.environ.get('REDIS_SCHEME', 'redis')
REDIS_HOST = os.environ.get('REDIS_HOST', '127.0.0.1')
REDIS_PASSWORD = os.environ.get('REDIS_PASSWORD', None)
REDIS_PORT = os.environ.get('REDIS_PORT', 6379)
REDIS_DB = os.environ.get('REDIS_DB', 0)

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'{REDIS_SCHEME}://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            'CONNECTION_POOL_KWARGS': {'max_connections': 100},
            'PASSWORD': REDIS_PASSWORD
        }
    }
}

ADMIN_SITE_TITLE = os.environ.get("ADMIN_SITE_TITLE", '荣昌免疫合规项目')
ADMIN_SITE_FOOTER = ADMIN_SITE_TITLE

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'  # 设置缓存机制为CACHES
SESSION_CACHE_ALIAS = 'default'  # CACHES的redis

REST_FRAMEWORK = {
    # 默认支持的返回数据格式
    'DEFAULT_RENDERER_CLASSES': [
        # api web 页面
        # 'rest_framework.renderers.BrowsableAPIRenderer',
        # json 格式
        'rest_framework.renderers.JSONRenderer'
    ],
    # 'DEFAULT_PAGINATION_CLASS': 'utils.base.HZKPPagination',
    # 'DEFAULT_AUTHENTICATION_CLASSES': ['utils.base.HZKPOpenidAuthentication'],
    # 'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],
    # 'PAGE_SIZE': 10,
    'DATETIME_FORMAT': DATETIME_FORMAT,
    'EXCEPTION_HANDLER': 'utils.ym_restframework.views.exception_handler',
}

if DEBUG:
    # rest framework renders api browsable
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].append('rest_framework.renderers.BrowsableAPIRenderer')

    # debug_toolbar Config

    INSTALLED_APPS.append('debug_toolbar')

    MIDDLEWARE.insert(1, 'debug_toolbar.middleware.DebugToolbarMiddleware')

    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
    ]

    INTERNAL_IPS = ('127.0.0.1',)

X_FRAME_OPTIONS = "SAMEORIGIN"

# 七牛云 - AccessKey
QINIU_ACCESS_KEY = os.environ.get('QINIU_ACCESS_KEY')
# 七牛云 - SecretKey
QINIU_SECRET_KEY = os.environ.get('QINIU_SECRET_KEY')
# 七牛云 - Domain
QINIU_DOMAIN = os.environ.get('QINIU_DOMAIN')
# 七牛云 - Bucket
QINIU_BUCKET_NAME = os.environ.get('QINIU_BUCKET_NAME')
# 是否使用 https
UEDITOR_USE_QINIU = True

LOG_ROOT = BASE_DIR.joinpath('log')

LOG_ROOT.mkdir(exist_ok=True)

rotating_file_handler = 'logging.handlers.RotatingFileHandler'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s %(threadName)s [%(name)s:%(module)s.%(funcName)s:%(lineno)d] '
                      '[%(levelname)s] - %(message)s',

        }
    },

    'handlers': {
        'default': {
            'level': 'INFO',
            'class': rotating_file_handler,
            'filename': LOG_ROOT / 'my_handlers.log',
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'api': {
            'level': 'INFO',
            'class': rotating_file_handler,
            'filename': LOG_ROOT / 'api.log',
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'request': {
            'level': 'INFO',
            'class': rotating_file_handler,
            'filename': LOG_ROOT / 'request.log',
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'signature': {
            'level': 'INFO',
            'class': rotating_file_handler,
            'filename': LOG_ROOT / 'signature.log',
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        "mail_admin": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "standard",
        },
        'user_log': {
            'level': 'DEBUG',
            'class': rotating_file_handler,
            'filename': LOG_ROOT / 'user_log.log',
            'maxBytes': 1024 * 1024 * 5 * 100,
            'backupCount': 5,
            'encoding': 'utf-8',
            'formatter': 'standard'
        },
        'except': {
            'level': 'DEBUG',
            'class': rotating_file_handler,
            'filename': LOG_ROOT / 'except.log',
            'maxBytes': 1024 * 1024 * 5 * 100,
            'backupCount': 5,
            'encoding': 'utf-8',
            'formatter': 'standard'
        },
        'normal': {
            'level': 'DEBUG',
            'class': rotating_file_handler,
            'filename': LOG_ROOT / 'normal.log',
            'maxBytes': 1024 * 1024 * 5 * 100,
            'backupCount': 5,
            'encoding': 'utf-8',
            'formatter': 'standard'
        },
        'wechat': {
            'level': 'INFO',
            'class': rotating_file_handler,
            'filename': LOG_ROOT / 'wechat.log',
            'maxBytes': 1024 * 1024 * 5 * 100,
            'backupCount': 5,
            'encoding': 'utf-8',
            'formatter': 'standard'
        }
    },
    'loggers': {
        __name__: {
            'handlers': ['normal'],
            'level': 'DEBUG',
            'propagate': True
        },
        'default': {
            'handlers': ['default'],
            'level': 'INFO',
            'propagate': False,
        },
        "django.request": {
            'handlers': ['default', 'mail_admin'],
            'level': 'INFO',
            'propagate': False
        },
        "django.error": {
            'handlers': ['default', 'mail_admin'],
            'propagate': True,
            'level': 'ERROR',
        },
        "project.app": {
            'handlers': ['default', 'mail_admin'],
            'level': 'INFO',
            'propagate': True
        },
        'user_log': {
            'handlers': ['user_log', ],
            'level': 'DEBUG',
            'propagate': True
        },
        'api': {
            'handlers': ['api'],
            'level': 'INFO',
            'propagate': True
        },
        'request': {
            'handlers': ['request'],
            'level': 'INFO',
            'propagate': True
        },
        'signature': {
            'handlers': ['signature'],
            'level': 'INFO',
            'propagate': True
        },
        'except': {
            'handlers': ['except'],
            'level': 'INFO',
            'propagate': True
        },
        'wechat': {
            'handlers': ['wechat'],
            'level': 'INFO',
            'propagate': True
        }
    }
}

# 253短信 账号
SMS_ACCOUNT = os.environ.get('SMS_ACCOUNT')
# 253短信 密码
SMS_PASSWORD = os.environ.get('SMS_PASSWORD')
# 253短信 API接口地址
SMS_SINGLE_SEND_URL = os.environ.get('SMS_SINGLE_SEND_URL')
# 短信签名
SMS_SIGNATURE = os.environ.get('SMS_SIGNATURE')

# 验证码有效期（秒）
SMS_VALID_SECONDS = 60 * 10
# 短信验证码发送间隔（秒）
SMS_SEND_INTERVAL = 60 * 1

WX_CODE = 'mexy'
WECHAT_DOMAIN = 'https://wechat.yuemia.com'

# 医生审核状态通知 模板ID
TEMPLATE_ID = 'iV2ojZK6T76zqevctX0QS4nwXS2VBnG13iiPLvQkU8U'

if not DEBUG:
    MIDDLEWARE.append('vendor.middleware.ApiSignatureMiddleware')
    ADMINS = [('admin', 'xiaopeng.deng@yuemia.com')]
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.exmail.qq.com'
    EMAIL_PORT = 465
    EMAIL_HOST_USER = 'log@medevent.cn'
    EMAIL_HOST_PASSWORD = 'Yuemia123'
    EMAIL_USE_SSL = True
    EMAIL_USE_TLS = False
    DEFAULT_FROM_EMAIL = SERVER_EMAIL = EMAIL_HOST_USER
    EMAIL_SUBJECT_PREFIX = "%s_%s_%s" % ('RongChang', 'v1.0', WSGI_APPLICATION.split(".")[0])

    # 设置 session 过期时间30分钟
    SESSION_COOKIE_AGE = 60 * 30
    SESSION_EXPIRE_AT_BROWSER_CLOSE = True

    # loggers config
    LOGGING['loggers']['django.request'] = {
        'handlers': ['default', 'mail_admin'],
        'level': 'INFO',
        'propagate': False
    }
    LOGGING['loggers']['django.error'] = {
        'handlers': ['default', 'mail_admin'],
        'propagate': True,
        'level': 'ERROR',
    }
    LOGGING['loggers']['project.app'] = {
        'handlers': ['default', 'mail_admin'],
        'level': 'INFO',
        'propagate': True
    }
